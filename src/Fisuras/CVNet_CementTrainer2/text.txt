
    //------------------------------------------------------------------------------------------------
    Net net; // auto net = std::make_shared<NetImpl>();
    // es equivalente ya que uso el TORCH_MODULE(Net) para "envolver la definicion" y poder usar la
    // definicion como Net simplemente. explicado en profundidad MUY POCO claro en,
    // https://pytorch.org/tutorials/advanced/cpp_frontend.html
    net->to(device); // lo paso a GPU si existe.
    //------------------------------------------------------------------------------------------------
    // Si existe un entrenamiento previo arranca desde ahi, sino empieza desde cero/
    try {
        torch::load(net, "model.pt");
    } catch (...) { }
    //------------------------------------------------------------------------------------------------
    // 5y9wdsg2zt-1.zip: Crea dos subcarpetas Negative y Positive, se decomprimio en esta direccion.
    // https://data.mendeley.com/datasets/5y9wdsg2zt/1
    string DATA_DIR = "C:\\Repositories\\CementCrack";
    //------------------------------------------------------------------------------------------------
    // Variables con las cuales voy a entrenar la RED
    //------------------------------------------------------------------------------------------------
    auto m_data_set_train = 
        torch::data::datasets::Cement(DATA_DIR, torch::data::datasets::Cement::Mode::Train)/*TRAIN*/
        /* creo q la opcion que le sigue es para que vaya sacando secuencialmente el par <IMG,LABEL> 
        y no seleccione al azar, xq ya lo mezcle cuando cree objeto <Cement>.*/
        .map(torch::data::transforms::Stack<>());

    auto m_data_loader_train =
        torch::data::make_data_loader(
            m_data_set_train, // para que no haga copias x ahi al pedo.
            /*opciones el tamano del lote y la cantidad de threads para cargar rapido*/
            torch::data::DataLoaderOptions().batch_size(m_batch_size).workers(4));
    //------------------------------------------------------------------------------------------------
    // Variables para testear la RED, la RED nunca las aprende, aca es donde tiene que generalizar.
    //------------------------------------------------------------------------------------------------
    auto m_data_set_test =
        torch::data::datasets::Cement(DATA_DIR, torch::data::datasets::Cement::Mode::Test)/*TEST*/
        .map(torch::data::transforms::Stack<>());

    auto m_data_loader_test =
        torch::data::make_data_loader(
            m_data_set_test,
            torch::data::DataLoaderOptions().batch_size(m_batch_size).workers(4));
    //------------------------------------------------------------------------------------------------
    // Aca elijo que algoritmo de aprendizaje que quiero, hay bocha, se pueden probar..
    // https://pytorch.org/cppdocs/api/namespace_torch__optim.html
    // https://arxiv.org/pdf/1412.6980.pdf
    //------------------------------------------------------------------------------------------------
    //torch::optim::SGD optimizer(net.parameters(), torch::optim::SGDOptions(0.1).momentum(0.4));
    torch::optim::Adam optimizer(net->parameters(), torch::optim::AdamOptions(2e-4).beta1(0.5));
    //--------------------------------------------------------------------------------------------

    size_t N_EPOCH_TO_TRAIN = 10;
    float m_best_accuracy = 0.0f;

    for (int epoch = 0; epoch < N_EPOCH_TO_TRAIN; epoch++) {
        // Testea las imagenes de entrenamiento
        size_t m_train = m_data_set_train.size().value();
        cout << "Try " << m_train/1000 << "k: ";
        test_batch(net, *m_data_loader_train, m_train);

        //Ahora testeo con imagenes con la cuales no entrena y nunca vio, si la red aprendio la graba a disco.
        size_t m_test = m_data_set_test.size().value();
        cout << "Try " << m_test/1000 << "k: ";
        float m_accuracy = test_batch(net, *m_data_loader_test, m_test);

        if (m_accuracy > m_best_accuracy) {
            m_best_accuracy = m_accuracy;
            cout << "Guardando!!.. a model.pt" << endl;       
            torch::save(net, "model.pt");     
        }

        //Haciendo una pasada por todas las imagenes para entrenar.
        train_batch(epoch, net, *m_data_loader_train, optimizer, m_train);
    };

      string IMAGE_NAME = "ejemplo.jpg";
    char filename_buffer[FILENAME_MAX];
    string m_path = _fullpath(filename_buffer, ".\\", _MAX_PATH); // Direccion de la carpeta del proyecto.
    string ImagesPath = m_path + IMAGE_NAME;

    // Lectura de las imagenes original y mascara de la carpeta ./input/
    sprintf_s(filename_buffer, FILENAME_MAX, ".\\input\\%s.jpg", "original");
    auto image_original = imread(ImagesPath, 1 /* CV_LOAD_IMAGE_COLOR*/);   // Read the file
    if (!image_original.data) {                             // Check for invalid input
        cout << "Could not open or find the image " << filename_buffer << std::endl;
        return -1;
    }

    Rect m_rect(0, 0, CUADSIZE, CUADSIZE); // Submatrix: https://stackoverflow.com/questions/27835439/opencv-submatrix-access-copy-or-reference
    Mat m_muestra = image_original(m_rect).clone();

    //------------------------------------------------------------------------------------------------
    Net net; // auto net = std::make_shared<NetImpl>();
    // es equivalente ya que uso el TORCH_MODULE(Net) para "envolver la definicion" y poder usar la
    // definicion como Net simplemente. explicado en profundidad MUY POCO claro en,
    // https://pytorch.org/tutorials/advanced/cpp_frontend.html
    net->to(device); // lo paso a GPU si existe.
    //------------------------------------------------------------------------------------------------
    // Si existe un entrenamiento previo arranca desde ahi, sino empieza desde cero/
    try {
        torch::load(net, "model.pt");
    }
    catch (...) {}

    std::vector<cv::Mat> rgb;
    cv::split(m_muestra, rgb);

    auto R = rgb[0];
    auto G = rgb[1];
    auto B = rgb[2];
    //----------------------------------------------------------------------------------
    auto m_images = torch::zeros({ 1 ,3 , 32, 32 }, device).to(at::kByte);
    m_images[0][0] = torch::from_blob(rgb[0].data, { 32, 32 }, at::kByte);
    m_images[0][1] = torch::from_blob(rgb[1].data, { 32, 32 }, at::kByte);
    m_images[0][2] = torch::from_blob(rgb[2].data, { 32, 32 }, at::kByte);

   // m_images.to(at::kFloat).div_(255);
    auto prediction = net->forward(m_images.to(at::kFloat).div_(255));
    cout << prediction << endl;







            char filename_buffer[FILENAME_MAX];
        string m_path = _fullpath(filename_buffer, ".\\", _MAX_PATH); // Direccion de la carpeta del proyecto.
        string ImagesPath = m_path + IMAGE_NAME;

        auto image_original = imread(ImagesPath, 1 /* CV_LOAD_IMAGE_COLOR*/);   // Read the file
        if (!image_original.data) {                             // Check for invalid input
            cout << "Could not open or find the image " << filename_buffer << std::endl;
            return -1;
        }
        
        auto m_size_max_cols = (image_original.cols / CUADSIZE) * CUADSIZE;
        auto m_size_max_rows = (image_original.rows / CUADSIZE) * CUADSIZE;
        cv::resize(image_original, image_original, cv::Size(m_size_max_cols, m_size_max_rows));

       

        Rect R(0, 0, 200, 200);
        Mat image_mask(image_original, R);
        image_mask = image_mask * 0.5f;


